export type BinaryAnalyzerKey = keyof any;
export type BinaryAnalyzerParserResultType = {
    Ascii: string;
    UIntBE: number;
    UIntLE: number;
    RawArray: number[];
};
export type BinaryAnalyzerParserType = keyof BinaryAnalyzerParserResultType;
type BinaryAnalyzerParserPostProcessFunc<Type extends BinaryAnalyzerParserType, Result extends any = any> = (data: BinaryAnalyzerParserResultType[Type]) => Result;
export interface BinaryAnalyzerParserRow<Key extends BinaryAnalyzerKey, Type extends BinaryAnalyzerParserType> {
    name: Key;
    filter: number[];
    type: Type;
    postProcess?: BinaryAnalyzerParserPostProcessFunc<Type>;
}
export interface BinaryAnalyzerNestRow<Key extends BinaryAnalyzerKey> {
    name: Key;
    filter: BinaryAnalyzer<any>;
}
export type BinaryAnalyzerRow<Key extends BinaryAnalyzerKey, Type extends BinaryAnalyzerParserType> = BinaryAnalyzerNestRow<Key> | BinaryAnalyzerParserRow<Key, Type>;
export declare class BinaryAnalyzer<OUTPUT extends Record<BinaryAnalyzerKey, any> = {}> {
    private _target;
    addTarget<N extends BinaryAnalyzerKey, Type extends BinaryAnalyzerParserType>(name: N, filter: number[], type: Type): BinaryAnalyzer<{
        [key in N]: BinaryAnalyzerParserResultType[Type];
    } & OUTPUT>;
    addTarget<N extends BinaryAnalyzerKey, Type extends BinaryAnalyzerParserType, Result extends any>(name: N, filter: number[], type: Type, postProcess?: BinaryAnalyzerParserPostProcessFunc<Type, Result>): BinaryAnalyzer<{
        [key in N]: Result;
    } & OUTPUT>;
    addTargetByLength<N extends BinaryAnalyzerKey, Type extends BinaryAnalyzerParserType>(name: N, length: number, type: Type): BinaryAnalyzer<{
        [key in N]: BinaryAnalyzerParserResultType[Type];
    } & OUTPUT>;
    addTargetByLength<N extends BinaryAnalyzerKey, Type extends BinaryAnalyzerParserType, Result extends any>(name: N, length: number, type: Type, postProcess?: BinaryAnalyzerParserPostProcessFunc<Type, Result>): BinaryAnalyzer<{
        [key in N]: Result;
    } & OUTPUT>;
    addGroup<N extends BinaryAnalyzerKey, NEST extends Record<BinaryAnalyzerKey, any>>(name: N, fnOrAnalyzer: BinaryAnalyzer<NEST> | ((analyzer: BinaryAnalyzer) => BinaryAnalyzer<NEST>)): BinaryAnalyzer<{
        [key in N]: NonNullable<ReturnType<BinaryAnalyzer<NEST>["getAllData"]>>;
    } & OUTPUT>;
    /**
     * 登録済みbinaryAnarlyzerのGroupを解除して、Flatな条件Arrayを作る
     */
    flat(): number[];
    length(): number;
    validate(target: number[] | string): boolean;
    getAllData(target: number[] | string): OUTPUT | null;
    private _convertToValue;
    private _convertToNumberArray;
}
export {};
